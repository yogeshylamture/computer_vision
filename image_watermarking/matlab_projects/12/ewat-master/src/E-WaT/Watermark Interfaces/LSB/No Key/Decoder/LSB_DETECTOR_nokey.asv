%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %  
%                           Hogeschool Antwerpen                          %
%                Industriële Wetenschappen: Elektronica-ICT               %
%                      MultiMediaGroep - Watermarking                     %
%                                                                         %
%                                                                         %
%                             Bachelorproef 3.2                           %
%              Kevin Heylen - Tom Meesters - Luc Verstrepen               %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% LSB without key decder                                                %%
%%This is a GUI for LSB watermarking without the use of a key. The       %%
%%detMessIm1 is converted to a set of images which represent the characters %%
%%of the detMessIm1. This image wil replace the LSB plane te be embedded as %%
%%watermark.                                                             %%

%% STANDARD GUI FUNCTIONS
%%
function varargout = LSB_DETECTOR_nokey(varargin)
% LSB_DETECTOR_nokey M-file for LSB_DETECTOR_nokey.fig
%      LSB_DETECTOR_nokey, by itself, creates a new LSB_DETECTOR_nokey or raises the existing
%      singleton*.
%
%      H = LSB_DETECTOR_nokey returns the handle to a new LSB_DETECTOR_nokey or the handle to
%      the existing singleton*.
%
%      LSB_DETECTOR_nokey('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in LSB_DETECTOR_nokey.M with the given input arguments.
%
%      LSB_DETECTOR_nokey('Property','Value',...) creates a new LSB_DETECTOR_nokey or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before LSB_DETECTOR_nokey_OpeningFunction gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to LSB_DETECTOR_nokey_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Copyright 2002-2003 The MathWorks, Inc.

% Edit the above text to modify the response to help LSB_DETECTOR_nokey

% Last Modified by GUIDE v2.5 08-Nov-2007 20:25:41

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @LSB_DETECTOR_nokey_OpeningFcn, ...
                   'gui_OutputFcn',  @LSB_DETECTOR_nokey_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before LSB_DETECTOR_nokey is made visible.
function LSB_DETECTOR_nokey_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to LSB_DETECTOR_nokey (see VARARGIN)

% Choose default command line output for LSB_DETECTOR_nokey
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes LSB_DETECTOR_nokey wait for user response (see UIRESUME)
% uiwait(handles.figure1);

%% ICONS
%%
%display icons on buttons
setIcon(handles.zoomIn, imread('Icons\zoomIn.jpg'), 25, 25);        %call setIcon function which displays the passed image in the passed uicontrol with the passed dimensions
setIcon(handles.zoomInClick, imread('Icons\zoomInClick.jpg'), 25, 25);   %call setIcon function which displays the passed image in the passed uicontrol with the passed dimensions
setIcon(handles.pan, imread('Icons\pan.jpg'), 25, 25);              %call setIcon function which displays the passed image in the passed uicontrol with the passed dimensions
setIcon(handles.zoomOutAll, imread('Icons\zoomOutAll.jpg'), 25, 25);%call setIcon function which displays the passed image in the passed uicontrol with the passed dimensions

%load images
workbar(0.1, 'Loading image', 'Loading image');

attack = get_root_data('attack');
switch attack
    case 'yes'
        im = get_root_data('working_watermarked');
        im_plot = get_root_data('plot_watermarked');
    otherwise
        im = get_root_data('working_attacked_decode');
        im_plot = get_root_data('plot_attacked_decode');
end   

set(handles.computingImage, 'Visible', 'on');                       %show info message 'computing'
workbar(1.0);
im_bp = im2bp(im);                                                  %split image in bitplanes with self written function im2bp
workbar(0.1, 'Displaying watermarked image', 'Displaying watermarked image...');
showBP_detector(handles, im_bp);                                    %show bitplanes
set(handles.computingBitplanes, 'Visible', 'off');                  %hide info message 'computing'
axes(handles.image)                                                 %set this axes as active
workbar(0.85);
image(im_plot);                                                          %display watermarked image
axis equal;                                                         %sets the aspect ratio. (Show the image in its right ratio)
axis tight;                                                         %Sets the axis limits to the arrange of the data.
axis off;                                                           %Turn off all axis labeling
set(handles.computingImage, 'Visible', 'off');                      %hide info message 'computing'
workbar(0.9);
cover = getimage(handles.bitplane1);                                %read cover work bitplane
[cH cW cD] = size(cover);                                           %get size of cover work
[aH aW aD] = size(alphabet('a'));                                   %determine size of character matrices (all characters should have same size)
b = get_root_data('blocksize');

        messageType = get_root_data('chosen_message');
            switch (messageType)
                case 'text'
                    message = get_root_data('chosen_message_text');
                    set(handles.messageOriginal_text, 'String', message);
                    set(handles.messageOriginal_text, 'Visible', 'on');
                case 'imag'
                    mess = get_root_data('embedded_message');
                    set(handles.messageOriginal_im, 'Visible', 'on');
                    axes(handles.messageOriginal_im)
                    imshow(mess);
                    axis equal
                    axis tight
                    axis off
            end
            workbar(1.0);
            detectWatermark_nokey(handles, im);      




%% STANDARD GUI FUNTIONS - CONTINUED
%%
% --- Outputs from this function are returned to the command line.
function varargout = LSB_DETECTOR_nokey_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;




%% ZOOM
%%
% --- Executes on button press in zoomIn.
function zoomIn_Callback(hObject, eventdata, handles)
% hObject    handle to zoomIn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%
%
if(get(handles.zoomIn, 'Value') == 1.0)             %zoom toggled on
    set(handles.pan, 'Value', 0.0);                 %toglle pan-button of
    pan off                                         %turn pan off
    axes_handles = zeros(1,9);                     %put handles of all axes in one vector
    axes_handles(1) = handles.bitplane1;
    axes_handles(2) = handles.bitplane2;
    axes_handles(3) = handles.bitplane3;
    axes_handles(4) = handles.bitplane4;
    axes_handles(5) = handles.bitplane5;
    axes_handles(6) = handles.bitplane6;
    axes_handles(7) = handles.bitplane7;
    axes_handles(8) = handles.bitplane8;
    axes_handles(9) = handles.image;
    linkaxes(axes_handles);
    a1 = handles.detMessIm1;
    a2 = handles.messageOriginal_im;
    linkaxes([a1, a2]);
    zoom                                                %enable dynamic zoom
else
    zoom off
end

%%
% --- Executes on button press in zoomInClick.
function zoomInClick_Callback(hObject, eventdata, handles)
% hObject    handle to zoomInClick (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
set(handles.zoomIn, 'Value', 0.0);      %toggle zoom button off
zoom off
set(handles.pan, 'Value', 0.0);     %toglle pan-button of
pan off                             %turn pan off
ax = get(gcf,'CurrentAxes');        %get current active axes
im = getimage(ax);                  %get image of current active axes
figure                              %open new figure
imshow(im);                         %show image


%%
% --- Executes on button press in pan.
function pan_Callback(hObject, eventdata, handles)
% hObject    handle to pan (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%
if(get(handles.pan, 'Value') == 1.0)
    set(handles.zoomIn, 'Value', 0.0);                      %toglle pan-button of
    zoom off                                                %turn zoom off
    pan                                                     %enable pan
else
    pan off
end

%%
% --- Executes on button press in zoomOutAll.
function zoomOutAll_Callback(hObject, eventdata, handles)
% hObject    handle to zoomOutAll (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%
set(handles.zoomIn, 'Value', 0.0);                      %toggle zoomIn-button off
zoom off                                                %turn zoom off
set(handles.pan, 'Value', 0.0);                         %toggle pan-button off
pan off                                                 %turn pan off
zoomOutAll_det_nokey(handles);                                    %resets all axes to initial zoom 

%%
% --- Executes on button press in helpZoom.
function helpZoom_Callback(hObject, eventdata, handles)
% hObject    handle to helpZoom (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%show info help detMessIm1
msgbox('To zoom in on any of the images or axes of the figure, click on the ''zoom in''-button. Then click on an image to zoom in or use the mouse to scroll up. To zoom in on a specific area, simply select that area. You can zoom out by holding CTRL while clicking on an image or axe or by scrolling down. To open an image in a new figure, click on the image and then hit the view-in-new-figure button. To restore an image, simply double click on it. To restore all the images and axes, use the ''zoom out all''-button. Panning is possible after clicking the pan-button.', 'Info', 'help');

%% help
%%

% --- Executes on button press in helpLSBnokey.
function helpLSBnokey_Callback(hObject, eventdata, handles)
% hObject    handle to helpLSBnokey (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


msgbox('In this GUI, the program will search for a message in the image. The decoder will search both for a image and a text message. The one with the highest correlation will be displayed. For simplicity, embedding parameters like selected bitplane and blocksize, are transferred automatically from embedder to decoder.', 'Help', 'help');


%% DONE
%%
% --- Executes on button press in Done.
%return to main GUI and close figure
function done_Callback(hObject, eventdata, handles)

watermark_found = get(handles.detMessTxt1,'Visible');
        switch watermark_found
            case 'on'       % Text was the message
                text_detected = get(handles.detMessTxt1,'String');
                text_embed = get(handles.messageOriginal_text,'String');
                
                set_root_data(handles,'embedded_text',text_embed);
                set_root_data(handles,'detected_text',text_detected);
                
                close();
                fhupdate_axes('text',text_detected);
                
            case 'off'
                image_detected = getimage(handles.detMessIm1);
                image_embed = getimage(handles.messageOriginal_im);
                
                set_root_data(handles,'embedded_image',image_embed);
                set_root_data(handles,'detected_image',image_detected);
                
                
                close();
                fhupdate_axes('image',image_detected);
        end;








