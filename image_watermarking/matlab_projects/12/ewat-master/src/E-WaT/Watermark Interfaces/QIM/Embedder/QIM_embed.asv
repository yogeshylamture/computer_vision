function varargout = QIM_embed(varargin)
% QIM_EMBED M-file for QIM_embed.fig
%      QIM_EMBED, by itself, creates a new QIM_EMBED or raises the existing
%      singleton*.
%
%      H = QIM_EMBED returns the handle to a new QIM_EMBED or the handle to
%      the existing singleton*.
%
%      QIM_EMBED('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in QIM_EMBED.M with the given input arguments.
%
%      QIM_EMBED('Property','Value',...) creates a new QIM_EMBED or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before QIM_embed_OpeningFunction gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to QIM_embed_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help QIM_embed

% Last Modified by GUIDE v2.5 02-Nov-2007 11:40:02

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @QIM_embed_OpeningFcn, ...
                   'gui_OutputFcn',  @QIM_embed_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before QIM_embed is made visible.
function QIM_embed_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to QIM_embed (see VARARGIN)

% Choose default command line output for QIM_embed
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes QIM_embed wait for user response (see UIRESUME)
% uiwait(handles.figure1);


        %load the image
        
        attack = get_root_data('attack');
        switch attack
            case 'yes'        
                im_plot = get_root_data('plot_watermarked');
            otherwise
                im_plot = get_root_data('plot_original');
        end;
        
        axes(handles.origIm);
        imshow(im_plot);   
        axis equal;
        axis tight;
        axis off;

        %Hide the unused axes
        set(handles.orig_block,'Visible','off');
        set(handles.dither_block,'Visible','off');
        set(handles.quant_block,'Visible','off');
        set(handles.wat_block,'Visible','off');
        set(handles.watIm,'Visible','off');
        

% --- Outputs from this function are returned to the command line.
function varargout = QIM_embed_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on slider movement.
function delta_Callback(hObject, eventdata, handles)
% hObject    handle to delta (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

        delta = round(get(handles.delta,'Value')); 
        set(handles.text9,'String',delta);

% --- Executes during object creation, after setting all properties.
function delta_CreateFcn(hObject, eventdata, handles)
% hObject    handle to delta (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes on button press in embed_btn.
function embed_btn_Callback(hObject, eventdata, handles)
% hObject    handle to embed_btn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

        %protection against false delta value of 0 
        if(round(get(handles.delta,'Value')) == 0)
            delta = 1;
        else
            delta = round(get(handles.delta,'Value'));           %set the size of one block in the cover work to be used for each bit in watermark
        end
        
        set_root_data(handles,'delta',delta);

        attack = get_root_data('attack');
        switch attack
            case 'no'
                type_key = get_root_data('chosen_key');
                switch type_key
                    case 'text'
                        key = get_root_data('chosen_key_text');

                    case 'imag'
                        key = get_root_data('chosen_key_image');
                end;
            otherwise
                type_key = get_root_data('chosen_key');
                switch type_key
                    case 'text'
                        key = get_root_data('chosen_key_text_attack');

                    case 'imag'
                        key = get_root_data('chosen_key_image_attack');
                end;
        end

        %read in the cover work
        cover_work = double(get_root_data('working_original'));

        switch attack
            case 'no'
                type = get_root_data('chosen_message');
                switch type
                    case 'text'
                        message = get_root_data('chosen_message_text');
                    case 'imag'
                        message = get_root_data('chosen_message_image');
                end;
            otherwise
                type = get_root_data('chosen_message');
                switch type
                    case 'text'
                        message = get_root_data('chosen_message_text_attack');
                    case 'imag'
                        message = get_root_data('chosen_message_image_attack');
                end;
        end
        
        [watermarked_image, orig_block, dither_block, quant_block, wat_block] = watermark(delta, cover_work, message, type, key, type_key);
        
        psnr_value = PSNR(double(cover_work),double(watermarked_image));
        set(handles.text2,'String',psnr_value);

        set_root_data(handles,'temp',watermarked_image);
        watermarked_image_int = uint8(watermarked_image);   
        rgb_watermarked = recontruct_from_working_image_for_plotting(watermarked_image_int);
        rgb_watermarked_int = uint8(rgb_watermarked);

        axes(handles.watIm);                                %show the image in the axes 'watIm'
        imshow(rgb_watermarked);                        %show the image
        axis equal;
        axis tight;
        axis off;
        
% --- Executes on button press in show_btn.
function show_btn_Callback(hObject, eventdata, handles)
% hObject    handle to show_btn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

        %protection against false delta value of 0 
        if(round(get(handles.delta,'Value')) == 0)
            delta = 1;
        else
            delta = round(get(handles.delta,'Value'));           %set the size of one block in the cover work to be used for each bit in watermark
        end

        attack = get_root_data('attack');
        switch attack
            case 'no'
                type_key = get_root_data('chosen_key');
                switch type_key
                    case 'text'
                        key = get_root_data('chosen_key_text');

                    case 'imag'
                        key = get_root_data('chosen_key_image');
                end;
            otherwise
                type_key = get_root_data('chosen_key');
                switch type_key
                    case 'text'
                        key = get_root_data('chosen_key_text_attack');

                    case 'imag'
                        key = get_root_data('chosen_key_image_attack');
                end;
        end

        %read in the cover work
        cover_work = double(get_root_data('working_original'));

        switch attack
            case 'no'
                type = get_root_data('chosen_message');
                switch type
                    case 'text'
                        message = get_root_data('chosen_message_text');
                    case 'imag'
                        message = get_root_data('chosen_message_image');
                end;
            otherwise
                type = get_root_data('chosen_message');
                switch type
                    case 'text'
                        message = get_root_data('chosen_message_text_attack');
                    case 'imag'
                        message = get_root_data('chosen_message_image_attack');
                end;
        end
        
        [watermarked_image, orig_block, dither_block, quant_block, wat_block] = watermark(delta, cover_work, message, type, key, type_key);
        
        axes(handles.orig_block);
        imshow(orig_block,[min(orig_block)-5 max(orig_block)+5]);
        axis equal;
        axis tight;
        axis off;
        
        axes(handles.dither_block);
        imshow(dither_block);
        axis equal;
        axis tight;
        axis off;
        
        axes(handles.quant_block);
        imshow(quant_block,[min(quant_block)-5 max(quant_block)+5]);
        axis equal;
        axis tight;
        axis off;
        
        axes(handles.wat_block);
        imshow(wat_block,[min(wat_block)-5 max(wat_block)+5]);
        axis equal;
        axis tight;
        axis off;

% --- Executes on button press in done_btn.
function done_btn_Callback(hObject, eventdata, handles)
% hObject    handle to done_btn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


        watermarked_image = get_root_data('temp');
        rgb_watermarked = recontruct_from_working_image_for_gui(watermarked_image);

        graph = 'watermarked';
        close;
        fhupdate_axes(graph,rgb_watermarked);
        
        
function [watermarked_image, orig_block, dither_block, quant_block, wat_block] = watermark(delta, cover_work, message, type_message, key, type_key)

        %determine size of cover work
        Mc=size(cover_work,1);	%Height
        Nc=size(cover_work,2);	%Width

        blocksize = 8;
        
        if(type_message == 'text')

            %Convert the message to binary form - 0's and 1's
            message_binary = dec2bin(message);

            %determine maximum message size based on cover work, and
            %blocksize
            max_message=floor(Mc*Nc/blocksize);

            %Create a message string from the binary form and find the size
            message_string = num2str(message_binary);
            k = size(message_string,1);
            l = size(message_string,2);

            %reshape the message to a vector consisting of 0's and 1's
            %the command reshape will take the content from message and assign it to a
            %matrix [1,k*l]
            message_reshaped = reshape(message_string,1,k*l);

            %check that the message isn't too large for cover
            if (size(message_reshaped,2) > max_message)
                msgbox('Message is too large to fit in Cover Work','Message error','error')
                error('Message too large to fit in Cover Work')
            end

            %first fill up the message_vector with ones
            %then replace ones with message bits
            message_vector = ones(1,max_message);
            message_vector(1:k*l) = message_reshaped-48;            %minus 48 is necessary correction
            message_vector(1:k*l);
        else
            [mH mW mD] = size(message);                                             %get size of message file
                if (mD == 1 )                                                       %make sure that the images consist of 3 layers
                    message = cat(3, message, message, message);
                elseif (mD == 2)
                    message = cat(2, message, message(:,:,2));
                elseif (mD > 3)
                    message = message(1:3);
                end
            message = rgb2gray(uint8(message));                                     %convert message to grayscale (1 layer);

            %determine size of message image
            Mm=size(message,1);	%Height
            Nm=size(message,2);	%Width

            %determine maximum message size based on cover work, and
            %blocksize
            max_message=floor(Mc*Nc/blocksize);

            %reshape the message to a vector consisting of 0's and 1's
            %the command reshape will take the content from message and assign it to a
            %matrix [Mm*Nm,1]
            message=round(reshape(message,Mm*Nm,1)./256);

            %check that the message isn't too large for cover
            if (length(message) > max_message)
                msgbox('Message is too large to fit in Cover Work','Message error','error')
                error('Message too large to fit in Cover Work')
            end

            %expand the message out to the maximum message size by adding 1's
            message_vector=ones(1,max_message);
            message_vector(1,1:length(message))=message;
        end

        if(type_key == 'text')
            key_text = key;

            %calculate the average of all values in the key text file
            m = size(key_text,1);
            sum = 0;
            for i = 1:m
                sum = sum + key_text(i,1);
            end
            average = round(sum/m);
        else
            key_image = key;

            %determine size of key image
            Mm=size(key_image,1);	%Height
            Nm=size(key_image,2);	%Width

            %calculate the average of all values in the key image file
            sum = 0;
            for i = 1:Mm
                for j = 1:Nm
                    sum = sum + key_image(i,j);
                end
            end
            average = round(sum/(Mm*Nm));
        end

        %reset MATLAB's PN generator to state with value 'average'
        rand('state',double(average));

        %generate dither vectors dither[0] and dither[1]
        dither0 = zeros(1, blocksize); %#ok<NASGU>
        dither1 = zeros(1, blocksize);
        
        dither0 = rand(1, blocksize)*delta - delta/2;
        for j = 1:blocksize
            if (dither0(1,j) < 0 == 1)
                dither1(1,j) = 5 + dither0(1,j);
            else
                dither1(1,j) = -5 + dither0(1,j);
            end
        end

        %initialize some parameters and images
        x=1;
        y=1;
        quantized_image = zeros(Mc,Nc);
        watermarked_image = zeros(Mc,Nc);
        
        %these blocks will visualize the embedding process
        orig_block = zeros(1, blocksize);
        dither_block = zeros(1, blocksize);
        quant_block = zeros(1, blocksize);
        wat_block = zeros(1, blocksize);
        
        k = 45;

        %For each bit in the message_vector, apply the dither vector to the cover work and quantize 
        for i = 1:size(message_vector,2)   
            workbar(i/size(message_vector,2),'Adding message...','Progress');

            %if message bit is zero, subtract dither0, quantize and
            %add dither0
            if (message_vector(1,i) == 0)
                quantized_image(y,x:(x+blocksize-1)) = round( ( cover_work(y,x:(x+blocksize-1)) - dither0(1,1:8) )/ delta) * delta;
                watermarked_image(y,x:(x+blocksize-1)) = quantized_image(y,x:(x+blocksize-1)) + dither0(1,1:8);

            %otherwise apply dither1
            else
                quantized_image(y,x:(x+blocksize-1)) = round( ( cover_work(y,x:(x+blocksize-1)) - dither1(1,1:8) )/ delta) * delta;
                watermarked_image(y,x:(x+blocksize-1)) = quantized_image(y,x:(x+blocksize-1)) + dither1(1,1:8);
            end
            
            %assign the blocks necessary to visualize the embedding process
            if (i == k)
                orig_block = cover_work(y,x:(x+blocksize-1));
                if (message_vector(1,k) == 0)
                    dither_block = dither0;
                else
                    dither_block = dither1;
                end
                quant_block = quantized_image(y,x:(x+blocksize-1));
                wat_block = watermarked_image(y,x:(x+blocksize-1));
            end

            %move to next block of mask along x; If at end of row, move to next row
            if ((x+2*blocksize-1) > Nc)
                x=1;
                if ((y+1) > Mc)
                    y = y;
                else
                    y = y + 1;
                end
            else
                x=x+blocksize;
            end
        end
        