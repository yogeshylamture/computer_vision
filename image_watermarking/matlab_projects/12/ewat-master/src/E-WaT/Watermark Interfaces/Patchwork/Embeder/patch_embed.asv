%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %  
%                           Hogeschool Antwerpen                          %
%                Industriële Wetenschappen: Elektronica-ICT               %
%                      MultiMediaGroep - Watermarking                     %
%                                                                         %
%                                                                         %
%                             Bachelorproef 3.2                           %
%              Kevin Heylen - Tom Meesters - Luc Verstrepen               %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
%%
%patch_embed: This is the patch for embedding a watermark

function varargout = patch_embed(varargin)
% PATCH_EMBED M-file for patch_embed.fig
%      PATCH_EMBED, by itself, creates a new PATCH_EMBED or raises the existing
%      singleton*.
%
%      H = PATCH_EMBED returns the handle to a new PATCH_EMBED or the handle to
%      the existing singleton*.
%
%      PATCH_EMBED('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in PATCH_EMBED.M with the given input arguments.
%
%      PATCH_EMBED('Property','Value',...) creates a new PATCH_EMBED or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before patch_embed_OpeningFunction gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to patch_embed_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help patch_embed

% Last Modified by GUIDE v2.5 04-Nov-2007 12:54:23

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @patch_embed_OpeningFcn, ...
                   'gui_OutputFcn',  @patch_embed_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before patch_embed is made visible.
function patch_embed_OpeningFcn(hObject, eventdata, handles, varargin)
       
        % Choose default command line output for patch_embed
        handles.output = hObject;

        % Update handles structure
        guidata(hObject, handles);

        % UIWAIT makes patch_embed wait for user response (see UIRESUME)
        % uiwait(handles.figure1);

        %read the image in
        attack = get_root_data('attack');

        switch attack
            case 'yes'
                im_original = get_root_data('plot_watermarked');       
            otherwise
                im_original = get_root_data('plot_original');          
        end
        
        %show the original image
        axes(handles.origIm);                               
        imshow(im_original);                                
        axis equal;
        axis tight;
        axis off;

        %Hide the unused axes
        set(handles.watermark,'Visible','off');
        set(handles.watIm,'Visible','off');

        %Read in the blocksize
        blocksize=round(get(handles.blocksize,'Value'));           

        %Read in the choice for one bit or a complete message
        message_bit = get(handles.message_bit,'Value');

        %read in the cover work
        switch attack
            case 'yes'
                cover_work = get_root_data('working_watermarked');       
            otherwise
                cover_work = get_root_data('working_original');          
        end
        
        %call the function that returns the watermark
        [watermark_mask,sequence] = make_watermark(blocksize,message_bit,cover_work);      

        %show the image in the axes 'watermark'
        axes(handles.watermark);                            
        imshow(watermark_mask,[-1 1]);                      
        axis equal;
        axis tight;
        axis off;

function varargout = patch_embed_OutputFcn(hObject, eventdata, handles) 
        varargout{1} = handles.output;

function blocksize_Callback(hObject, eventdata, handles)
        
        %Get the size of one block in the cover work to be used for each
        %bit in watermark
        blocksize=round(get(handles.blocksize,'Value'));           
        set(handles.text8,'String',num2str(blocksize));

        %Read in the choice for one bit or a complete message
        message_bit = get(handles.message_bit,'Value');

        %read in the cover work
        attack =get_root_data('attack');
        switch attack
            case 'yes'
                 cover_work = get_root_data('working_watermarked');       %read the image in
            otherwise
                cover_work = get_root_data('working_original');       %read the image in
        end

        %call the function that returns the watermark
        [watermark_mask,sequence] = make_watermark(blocksize,message_bit,cover_work);

        axes(handles.watermark);                            
        imshow(watermark_mask,[-1 1]);                      
        axis equal;
        axis tight;
        axis off;

function blocksize_CreateFcn(hObject, eventdata, handles)

    if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor',[.9 .9 .9]);
    end


%% Button embed
function embed_btn_Callback(hObject, eventdata, handles)
        
        %get the embedding strength
        strength = round(get(handles.k,'value'));                  

        %get the size of one block in the cover work to be used for each
        %bit in watermark
        blocksize=round(get(handles.blocksize,'Value'));       

        %Get the choice for one bit or a complete message
        message_bit = get(handles.message_bit,'Value');

        %read in the cover work
        attack = get_root_data('attack');
        switch attack
            case 'yes'
                cover_work = get_root_data('working_watermarked');       %read the image in
            otherwise
                cover_work = get_root_data('working_original');       %read the image in
        end
        
        %call the function that returns the watermark
        [watermark_mask,sequence] = make_watermark(blocksize,message_bit,cover_work);      

        %Apply the watermark mask to the original cover work
        watermarked_image = double(cover_work) + strength*watermark_mask;
        watermarked_image_int = uint8(watermarked_image);

        %calculate the psnr
        psnr_value = PSNR(double(cover_work),double(watermarked_image_int));
        set(handles.edit2,'String',psnr_value);

        set_root_data(handles,'temp',watermarked_image_int);

        %Write the parameters to files
        set_root_data(handles,'patch_k',strength);
        set_root_data(handles,'patch_blocksize',blocksize);
        set_root_data(handles,'message_bit',message_bit);
        set_root_data(handles,'sequence',sequence);
        rgb_watermarked = recontruct_from_working_image_for_plotting(watermarked_image_int);

        %show the image in the axes 'watIm'
        axes(handles.watIm);                                
        imshow(rgb_watermarked);                            
        axis equal;
        axis tight;
        axis off;


%% Slider update
function k_Callback(hObject, eventdata, handles)
        
        %Get the embedding strength set by the user
        strength = round(get(handles.k,'value'));                  
        set(handles.text7,'String',num2str(strength));

        %set the size of one block in the cover work to be used for each
        %bit in watermark
        blocksize=round(get(handles.blocksize,'Value'));       

        %Get the choice for one bit or a complete message
        message_bit = get(handles.message_bit,'Value');

        %read in the cover work
        attack = get_root_data('attack');
        switch attack
            case 'yes'
                 cover_work = get_root_data('working_watermarked');       %read the image in
            otherwise
                cover_work = get_root_data('working_original');       %read the image in
        end
        
        %call the function that returns the watermark
        [watermark_mask,sequence] = make_watermark(blocksize,message_bit,cover_work);      

        %Apply the watermark mask to the original cover work
        watermarked_image = double(cover_work) + strength*watermark_mask;
        watermarked_image_int = uint8(watermarked_image);

        %calculate the psnr
        psnr_value = PSNR(double(cover_work),double(watermarked_image_int));
        set(handles.edit2,'String',psnr_value);

        set_root_data(handles,'temp',watermarked_image_int);

        %Write the parameters to files
        set_root_data(handles,'patch_k',strength);
        set_root_data(handles,'patch_blocksize',blocksize);
        set_root_data(handles,'message_bit',message_bit);
        set_root_data(handles,'sequence',sequence);

        rgb_watermarked = recontruct_from_working_image_for_plotting(watermarked_image_int);

        %show the image in the axes 'watIm'
        axes(handles.watIm);                                
        imshow(rgb_watermarked);                            
        axis equal;
        axis tight;
        axis off;

%%
function k_CreateFcn(hObject, eventdata, handles)
        
        if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
            set(hObject,'BackgroundColor',[.9 .9 .9]);
        end


function [watermark,sequence] = make_watermark (blocksize,message_bit,cover_work)

        %determine the size of the cover work
        Mc = size(cover_work, 1);       %Height
        Nc = size(cover_work, 2);       %Width

        %Read in the type of key and the key itself
        type_key = get_root_data('chosen_key');
        switch type_key
            case 'text'
                key = get_root_data('chosen_key_text');

            case 'imag'
                key = get_root_data('chosen_key_image');
        end;

        %Calculate the average value of the key
        if(type_key == 'text')
            key_text = key;

            %calculate the average of all values in the key text file
            m = size(key_text,1);
            sum = 0;
            for i = 1:m
                sum = sum + key_text(i,1);
            end
            average = round(sum/m);
        else
            key_image = key;

            %determine size of key image
            Mm=size(key_image,1);	%Height
            Nm=size(key_image,2);	%Width

            %calculate the average of all values in the key image file
            sum = 0;
            for i = 1:Mm
                for j = 1:Nm
                    sum = sum + key_image(i,j);
                end
            end
            average = round(sum/(Mm*Nm));
        end

        %reset Matlab's Pseudo Random Number Generator (PRNG) to state with initial
        %value average
        rand('state', double(average));

        %Read in the chosen type of message and the message itself
        attack = get_root_data('attack');
        switch attack
            case 'no'
                messageType = get_root_data('chosen_message');
                switch messageType
                    case 'text'
                        message = get_root_data('chosen_message_text');
                    case 'imag'
                        message = get_root_data('chosen_message_image');
                end;
            otherwise
                messageType = get_root_data('chosen_message');
                switch messageType
                    case 'text'
                        message = get_root_data('chosen_message_text_attack');
                    case 'imag'
                        message = get_root_data('chosen_message_image_attack');
                end;
        end;
        
        if(messageType == 'text')

            %Convert the message to binary form - 0's and 1's
            message_binary = dec2bin(message);

            %determine maximum message size based on cover work, and blocksize
            max_message=floor(Mc*Nc/(blocksize^2));

            %Create a message string from the binary form and find the size
            message_string = num2str(message_binary);
            k = size(message_string,1);
            l = size(message_string,2);

            %reshape the message to a vector consisting of 0's and 1's
            %the command reshape will take the content from message and assign it to a
            %matrix [1,k*l]
            message_reshaped = reshape(message_string,1,k*l);

            %check that the message isn't too large for cover
            if (size(message_reshaped,2) > max_message)
                msgbox('Message is too large to fit in Cover Work','Message error','error')
                error('Message too large to fit in Cover Work')
            end

            %first fill up the message_vector with ones
            %then replace ones with message bits
            message_vector = ones(1,max_message);
            message_vector(1:k*l) = message_reshaped-48;            %minus 48 is necessary correction
            length_message = k*l;
        else
            [mH mW mD] = size(message);                                             %get size of message file
                if (mD == 1 )                                                       %make sure that the images consist of 3 layers
                    message = cat(3, message, message, message);
                elseif (mD == 2)
                    message = cat(2, message, message(:,:,2));
                elseif (mD > 3)
                    message = message(1:3);
                end
            message = rgb2gray(uint8(message));                                     %convert message to grayscale (1 layer);

            %determine size of message image
            Mm=size(message,1);	%Height
            Nm=size(message,2);	%Width

            %determine maximum message size based on cover work, and blocksize
            max_message=floor(Mc*Nc/(blocksize^2));

            %reshape the message to a vector consisting of 0's and 1's
            %the command reshape will take the content from message and assign it to a
            %matrix [Mm*Nm,1]
            message=round(reshape(message,Mm*Nm,1)./256);

            %check that the message isn't too large for cover
            if (length(message) > max_message)
                msgbox('Message is too large to fit in Cover Work','Message error','error')
                error('Message too large to fit in Cover Work')
            end

            %expand the message out to the maximum message size by adding 1's
            message_vector=ones(1,max_message);
            message_vector(1,1:length(message))=message;
            length_message = length(message);
        end
        
        %first construct the global watermark mask
        watermark_mask = zeros(Mc, Nc);
        
        %Create a variable to store the coordinates of the watermarked
        %pixels
        sequence = zeros(1,length_message*4);
        j = 1;
        
        Bv = floor(Mc/blocksize);        %Number of vertical blocks
        Bh = floor(Nc/blocksize);        %Number of horizontal blocks
        
        %Create a variable to check if this patch is already watermarked
        patch_used = zeros(Bv,Bh);
        
        for(i = 1:length_message)
            workbar(i/length_message,'Adding message...','Progress');
            if ( message_bit == 1 )

               %Choose a first random block
               ax = ceil(rand*Bv);
               ay = ceil(rand*Bh);
               
               mean_a = mean2(cover_work(ax*blocksize-blocksize+1:ax*blocksize,ay*blocksize-blocksize+1:ay*blocksize));
               
               %Choose a second block with an approximate equal value
               bx = ceil(rand*Bv);
               by = ceil(rand*Bh);
               
               mean_b = mean2(cover_work(bx*blocksize-blocksize+1:bx*blocksize,by*blocksize-blocksize+1:by*blocksize));
               
               while (uint8(mean_a) - uint8(mean_b) > 4 || uint8(mean_b) - uint8(mean_a) > 4)
                   bx = ceil(rand*Bv);
                   by = ceil(rand*Bh);
                   mean_b = mean2(cover_work(bx*blocksize-blocksize+1:bx*blocksize,by*blocksize-blocksize+1:by*blocksize));
               end
               
               sequence(1,j) = ax;
               sequence(1,j+1) = ay;
               sequence(1,j+2) = bx;
               sequence(1,j+3) = by;
               j = j + 4;

               %Apply the values to the selected pair of blocks
               watermark_mask(ax*blocksize-blocksize+1:ax*blocksize,ay*blocksize-blocksize+1:ay*blocksize) = 1;
               watermark_mask(bx*blocksize-blocksize+1:bx*blocksize,by*blocksize-blocksize+1:by*blocksize) = -1;
            else 

               %Choose a first random block
               ax = ceil(rand*Bv);
               ay = ceil(rand*Bh);
               
               %Check if the patch is already watermarked
               while( patch_used(ax,ay) == 1)
                    ax = ceil(rand*Bv);
                    ay = ceil(rand*Bh);
               end
               
               patch_used(ax,ay) = 1;
               
               mean_a = mean2(cover_work(ax*blocksize-blocksize+1:ax*blocksize,ay*blocksize-blocksize+1:ay*blocksize));
               
               %Choose a second block with an approximate equal value
               bx = ceil(rand*Bv);
               by = ceil(rand*Bh);
               
               mean_b = mean2(cover_work(bx*blocksize-blocksize+1:bx*blocksize,by*blocksize-blocksize+1:by*blocksize));
               
               %Check if the patch is already watermarked
               while( patch_used(bx,by) == 1)
                   bx = ceil(rand*Bv);
                   by = ceil(rand*Bh);
                   mean_b = mean2(cover_work(bx*blocksize-blocksize+1:bx*blocksize,by*blocksize-blocksize+1:by*blocksize));
                   if (uint8(mean_a) - uint8(mean_b) > 1 || uint8(mean_b) - uint8(mean_a) > 1)
                       bx = ceil(rand*Bv);
                       by = ceil(rand*Bh);
                       mean_b = mean2(cover_work(bx*blocksize-blocksize+1:bx*blocksize,by*blocksize-blocksize+1:by*blocksize));
                   end
               end
               
               %Change the value into 1 to show that this patch will be
               %watermarked
               patch_used(bx,by) = 1;
               
               sequence(1,j) = ax;
               sequence(1,j+1) = ay;
               sequence(1,j+2) = bx;
               sequence(1,j+3) = by;
               j = j + 4;

               %Apply the values to the selected pair of blocks
               if (message_vector(1,i) == 1)
                    watermark_mask(ax*blocksize-blocksize+1:ax*blocksize,ay*blocksize-blocksize+1:ay*blocksize) = 1;
                    watermark_mask(bx*blocksize-blocksize+1:bx*blocksize,by*blocksize-blocksize+1:by*blocksize) = -1;
               else
                    watermark_mask(ax*blocksize-blocksize+1:ax*blocksize,ay*blocksize-blocksize+1:ay*blocksize) = -1;
                    watermark_mask(bx*blocksize-blocksize+1:bx*blocksize,by*blocksize-blocksize+1:by*blocksize) = 1;
               end
            end
        end
        
        watermark = watermark_mask;


%% Button done
function done_btn_Callback(hObject, eventdata, handles)

        watermarked_image = get_root_data('temp');
        rgb_watermarked = recontruct_from_working_image_for_gui(watermarked_image);

        graph = 'watermarked';
        close;
        fhupdate_axes(graph,rgb_watermarked);
%% PSNR 
function edit2_Callback(hObject, eventdata, handles)

function edit2_CreateFcn(hObject, eventdata, handles)

        if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
            set(hObject,'BackgroundColor','white');
        end
%% Info
function pushbutton_patch_info_Callback(hObject, eventdata, handles)

        msgbox('In this GUI, you can configure the watermark. You can set the blocksize en the percentage of pixels used to patch the selected image. You can also adjust the embedding strength.','Help','help');



% --- Executes on button press in message_bit.
function message_bit_Callback(hObject, eventdata, handles)
% hObject    handle to message_bit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of message_bit

        %set the size of one block in the cover work to be used for each
        %bit in watermark
        blocksize=round(get(handles.blocksize,'Value'));           
        set(handles.text8,'String',num2str(blocksize));

        %Get the choice for one bit or a complete message
        message_bit = get(handles.message_bit,'Value');

        %read in the cover work
        attack =get_root_data('attack');
        switch attack
            case 'yes'
                 cover_work = get_root_data('working_watermarked');       %read the image in
            otherwise
                cover_work = get_root_data('working_original');       %read the image in
        end

        %call the function that returns the watermark
        [watermark_mask,sequence] = make_watermark(blocksize,message_bit,cover_work);
        
        %show the watermark
        axes(handles.watermark);                            
        imshow(watermark_mask,[-1 1]);                      
        axis equal;
        axis tight;
        axis off;
